\relax 
\providecommand \oddpage@label [2]{}
\@writefile{toc}{\contentsline {section}{\numberline {\CJKnumber  {1}、}实验要求}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.}系统调用}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.}\texttt  {fork()}的奥秘}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.}哼哈二将\texttt  {exit()}\&\texttt  {wait()}}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {\CJKnumber  {2}、}实验过程与结果}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.}系统调用}{2}{}\protected@file@percent }
\newlabel{zeroSyscall}{{1.}{2}}
\newlabel{zero}{{1.}{3}}
\newlabel{zeroRes}{{1.}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.}\texttt  {fork()}的设计与实现}{3}{}\protected@file@percent }
\newlabel{process}{{2.}{3}}
\newlabel{zeroRes1}{{2.}{4}}
\newlabel{forkTest}{{2.}{4}}
\newlabel{forkRes}{{2.}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.}\texttt  {wait()}与\texttt  {exit()}的设计与实现}{5}{}\protected@file@percent }
\newlabel{firstText}{{3.}{5}}
\newlabel{firstRes}{{3.}{5}}
\@writefile{toc}{\contentsline {section}{\numberline {\CJKnumber  {3}、}问答题}{6}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.}根据gdb来分析执行系统调用后的栈的变化情况}{6}{}\protected@file@percent }
\newlabel{esp}{{1.}{6}}
\newlabel{esp2}{{1.}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.}根据gdb来说明TSS在系统调用执行过程中的作用}{7}{}\protected@file@percent }
\newlabel{tss0}{{2.}{7}}
\newlabel{tss1}{{2.}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.}从子进程第一次被调度执行时开始，逐步跟踪子进程的执行流程一直到子进程从\texttt  {fork()}返回，根据gdb来分析子进程的跳转地址、数据寄存器和段寄存器的变化。同时，比较上述过程和父进程执行完\texttt  {ProgramManager::fork()}后的返回过程的异同}{8}{}\protected@file@percent }
\newlabel{sub0}{{3.}{9}}
\newlabel{sub1}{{3.}{9}}
\newlabel{sup}{{3.}{10}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.}根据代码逻辑和gdb来解释\texttt  {fork()}是如何保证子进程的\texttt  {fork()}返回值是0，而父进程的\texttt  {fork()}返回值是子进程的pid}{11}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.}分析进程退出后能够隐式地调用\texttt  {exit()}和此时的\texttt  {exit()}返回值是0的原因}{11}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.}回收僵尸进程}{11}{}\protected@file@percent }
\newlabel{zombie}{{6.}{11}}
\gdef \@abspage@last{11}
